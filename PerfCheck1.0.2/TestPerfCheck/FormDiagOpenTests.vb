'
' Created by SharpDevelop.
' User: ta185044
' Date: 7/26/2012
' Time: 8:35 PM
' 
' To change this template use Tools | Options | Coding | Edit Standard Headers.
'
Imports NUnit.Framework
Imports System.Reflection
<TestFixture> _
Public Class FormDiagOpenTests
	Private frmDiagOpen As FormDiagOpen
	
	Dim perfConfigData As PerfConfigData
	<SetUp()> _
	Public Sub SetUp()
		frmDiagOpen = New FormDiagOpen()
		MessageService.Attach(New ConsoleMessageProvider())		
		perfConfigData = New PerfConfigData()
		perfConfigData.DictionaryPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\PerfCheck\test\config\NCR39\"
		perfConfigData.DiagFilesPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\PerfCheck\test\logs"
		frmDiagOpen.PerfConfigData = perfConfigData
		TestData.createDictionaryFiles()
		TestData.createEventLogFile()		
		MessageService.Attach(New ConsoleMessageProvider())
	End Sub
	
	<TearDown()> _
	Public Sub TearDown()
		frmDiagOpen = Nothing
	End Sub
	
	<Test> _
	Public Sub TestOKButton()
		' TODO: Add your test.
'		openDiagForm.LoadFormDiagOpen()
'		openDiagForm.ParsedDiag()
	frmDiagOpen.PerfConfigData = perfConfigData
	frmDiagOpen.LoadFormDiagOpen(New ExtendedStringReader(TestData.LogAnalTraceListStub()))
	frmDiagOpen.ParsedDiag()
	Assert.NotNull(frmDiagOpen.EventsFound)
	End Sub
	
	<Test> _
	Public Sub TestOKButton_Event()
		' TODO: Add your test.
		' Get the constructor and create an instance of FormDiagOpen
		Dim type As Type=frmDiagOpen.GetType() 
		Dim frmDiagOpenDetailConstructor As ConstructorInfo = type.GetConstructor(Type.EmptyTypes)
        Dim frmDiagOpenDetailClassObject As Object = frmDiagOpenDetailConstructor.Invoke(New Object(){})
		
		' Get the OK_Button_Click method and invoke with a parameter value of Nothing
		Dim dynamicMethod As MethodInfo = type.GetMethod("OK_Button_Click", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly)
		'frmDiagOpen.DictionaryDir = perfConfigData
		'frmDiagOpen.DiagDir = diagPath
		frmDiagOpen.PerfConfigData = perfConfigData
		frmDiagOpen.LoadFormDiagOpen(New ExtendedStringReader(TestData.LogAnalTraceListStub()))
		Dim obj As Object() = {frmDiagOpen,Nothing}
		
		dynamicMethod.Invoke(frmDiagOpenDetailClassObject,obj)
		'frmDiagOpen.ParsedDiag()
	
	End Sub
	
	<Test> _
	<ExpectedException(GetType(TargetInvocationException))> _
	Public Sub TestFormDiagOpenLoad_Event()
		' TODO: Add your test.
		' Get the constructor and create an instance of FormDiagOpen
		Dim type As Type=frmDiagOpen.GetType()
		Dim frmDiagOpenDetailConstructor As ConstructorInfo = type.GetConstructor(Type.EmptyTypes)
        Dim frmDiagOpenDetailClassObject As Object = frmDiagOpenDetailConstructor.Invoke(New Object(){})
		' Get the FormDiagOpen_Load method and invoke with a parameter value of Nothing
		Dim dynamicMethod As MethodInfo = type.GetMethod("FormDiagOpen_Load", BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.DeclaredOnly)
		Dim obj As Object() = {frmDiagOpen,Nothing}
		
		dynamicMethod.Invoke(frmDiagOpenDetailClassObject,obj)
		'frmDiagOpen.ParsedDiag()
	
	End Sub
	
	
	<Test> _
	Public Sub TestCheckBoxListChanged()
		Dim indexChange As Integer
		frmDiagOpen.LoadFormDiagOpen(New ExtendedStringReader(TestData.LogAnalTraceListStub()))
		indexChange = frmDiagOpen.CheckedListBox1.Items.IndexOf("Traces")
		frmDiagOpen.CheckedListBox1.SetSelected(indexChange,True)
		frmDiagOpen.CheckedListBox1.SetItemChecked(indexChange,False)
		Assert.IsFalse(frmDiagOpen.CheckedListBox1.GetItemChecked(indexChange))
		frmDiagOpen.checkedlistbox_selectedindexchanged(frmDiagOpen,Nothing)
		Assert.IsFalse(frmDiagOpen.CheckList(frmDiagOpen.CheckedListBox1.Items(indexChange)))
	End Sub
	
	
End Class
